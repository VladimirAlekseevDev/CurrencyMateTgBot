package dev.sgd.currencymate.tgbot.actions;

import dev.sgd.currencymate.tgbot.adapter.currencymate.AdapterCurrencymate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.NumberFormat;
import java.util.Locale;

@Component
public class TgBot extends TelegramLongPollingBot {

    private static final String text =
    """   
    –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üëã‚ú®
    
    –õ–æ–≤–∏ —Å–≤–µ–∂–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç—ã, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ —Ç–µ–º–µ! üìäüíπ
    –ú—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å—ë —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ª–µ–≥–∫–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üìà
    
    üìàüíé –ö—Ä–∏–ø—Ç–∞:
    
    ü™ô ‚Çø –ë–∏—Ç–∫–æ–∏–Ω (BTC) - $ –î–æ–ª–ª–∞—Ä (USD):  %s $
    
    ü™ô Œû –≠—Ñ–∏—Ä–∏—É–º - $ –î–æ–ª–ª–∞—Ä (USD):  %s $
    
    
    üí∞üåç –§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã:
    
    üíµ $ –î–æ–ª–ª–∞—Ä (USD) - ‚ÇΩ –†—É–±–ª—å (RUB):  %s ‚ÇΩ
    
    üí∂ ‚Ç¨ –ï–≤—Ä–æ (EUR) - ‚ÇΩ –†—É–±–ª—å (RUB):  %s ‚ÇΩ
    
    
    üíµ $ –î–æ–ª–ª–∞—Ä (USD) - ‚Ç∫ –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞ (TRY):  %s
    
    üí∂ ‚Ç¨ –ï–≤—Ä–æ (EUR) - ‚Ç∫ –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞ (TRY):  %s
    
    
    üíµ $ –î–æ–ª–ª–∞—Ä (USD) - ‚Çæ –ì—Ä—É–∑–∏–Ω—Å–∫–∏–π –ª–∞—Ä–∏ (GEL):  %s
    
    üí∂ ‚Ç¨ –ï–≤—Ä–æ (EUR) - ‚Çæ –ì—Ä—É–∑–∏–Ω—Å–∫–∏–π –ª–∞—Ä–∏ (GEL):  %s
    
    –ñ–µ–ª–∞–µ–º —Ç–µ–±–µ –∫—Ä—É—Ç–æ–≥–æ –¥–Ω—è, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Ç–æ–ª—å–∫–æ —É–¥–∞—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π! üåàüöÄ
    –¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å–ª–µ–¥–∏—à—å –∑–∞ –∫—É—Ä—Å–∞–º–∏! üòé‚ú®
    """;

    private static final NumberFormat NUMBER_FORMAT;
    static {
        NUMBER_FORMAT = NumberFormat.getInstance(Locale.of("ru", "RU"));
        NUMBER_FORMAT.setMinimumFractionDigits(0);
        NUMBER_FORMAT.setMaximumFractionDigits(2);
        NUMBER_FORMAT.setGroupingUsed(true);
    }

    private final String botUsername;
    private final AdapterCurrencymate adapterCurrencymate;

    public TgBot(@Value("${bot.token}") String botToken,
                 @Value("${bot.username}") String botUsername,
                 AdapterCurrencymate adapterCurrencymate) {
        super(botToken);
        this.botUsername = botUsername;
        this.adapterCurrencymate = adapterCurrencymate;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            SendMessage newMessage = new SendMessage();
            newMessage.setChatId(update.getMessage().getChatId());
            newMessage.setText(getFormattedText());
            try {
                execute(newMessage);
            } catch (TelegramApiException e) {
                throw new RuntimeException(e);
            }
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    private String getFormattedText() {
        String btc = getVal("BTC", "USD");
        String eth = getVal("ETH", "USD");
        String usdRUB = getVal("USD", "RUB");
        String eurRUB = getVal("EUR", "RUB");
        String usdTRY = getVal("USD", "TRY");
        String eurTRY = getVal("EUR", "TRY");
        String usdGEL = getVal("USD", "GEL");
        String eurGEL = getVal("EUR", "GEL");
        return String.format(text, btc, eth, usdRUB, eurRUB, usdTRY, eurTRY, usdGEL, eurGEL);
    }

    private String getVal(String from, String to) {
        BigDecimal rate = adapterCurrencymate.getExchangeRate(from, to).getRate();
        rate = rate.setScale(2, RoundingMode.HALF_UP);

        return NUMBER_FORMAT.format(rate);
    }

}